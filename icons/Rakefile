require 'rake/packagetask'
require 'zip'
require 'erb'
require 'uu_os'
require 'uu_c3'
require 'versionomy'
require 'fileutils'

DEPLOY_CONFIG = {
  appBoxFolderUri: "ues:UU-BT:PRD.UU-UU5G04-ICONS/APPBOX",
  poolUri: "ues:DEV0116-BT:DEV"
}

class ZipFileGenerator

  # Initialize with the directory to zip and the location of the output archive.
  def initialize(input_dir, output_file)
    @input_dir = input_dir
    @server_pack_file = output_file
  end

  # Zip the input directory.
  def write(include_dir = false)
    entries = Dir.entries(@input_dir) - %w(. ..)
    io = Zip::File.open(@server_pack_file, Zip::File::CREATE)
    io.mkdir(File.basename(@input_dir)) if include_dir
    writeEntries(entries, '', io, include_dir)
    io.close
  end

  # A helper method to make the recursion work.
  private
  def writeEntries(entries, path, io, include_dir)
    entries.each do |e|
      zip_file_path = path == '' ? e : File.join(path, e)
      disk_file_path = File.join(@input_dir, zip_file_path)
      full_zip_file_path = include_dir ? File.join(File.basename(@input_dir), zip_file_path) : zip_file_path

      if File.directory?(disk_file_path)
        io.mkdir(full_zip_file_path)
        subdir = Dir.entries(disk_file_path); subdir.delete('.'); subdir.delete('..')
        writeEntries(subdir, zip_file_path, io, include_dir)
      else
        io.add(full_zip_file_path, disk_file_path)
      end
    end
  end
end

class Package

  attr_reader :path, :package, :name, :lib_name, :vendor, :dependencies

  def initialize(path = 'package.json')
    @path = path

    begin
      @package = JSON.parse(@path, symbolize_names: true)
    rescue
      File.open(@path, 'r') do |f|
        @package = JSON.parse(f.read, symbolize_names: true)
      end
    end
    @name = @package[:name]
    names = @package[:name].split("_")

    @lib_name = names.size > 1 ? names[1] : @package[:name]
    @vendor = names.size > 1 ? names[0] : "uu"

    if names[1] && names[0][/g\d{2}$/]
      @lib_name = @package[:name]
      @vendor = "uu"
    end


    @version = Versionomy.parse(@package[:version])
    @dependencies = @package[:dependencies]
  end

  def up_version(new_version = nil)
    @version = new_version ? Versionomy.parse(new_version) : bump_version
    save
    @version
  end

  def version
    @version.to_s
  end

  def save
    @package[:version] = version
    File.open(@path, 'w') do |f|
      f.write(JSON.pretty_generate(@package))
    end
  end

  private

  def bump_version
    case @version.release_type
      when :final
        new_version = @version.bump(:tiny)
      when :alfa
        new_version = @version.bump(:alfa_version)
      when :beta
        new_version = @version.bump(:beta_version)
      else
        raise "Unknown release type in version #{@version.to_s}"
    end
    new_version
  end
end

namespace :uuapps do

  # run: rake uuapps:package[0.9.5]
  desc 'Create target package of application.'
  task :package, [:version, :login] do |_, args|
    target = 'target'

    @package = Package.new
    @package.up_version(args[:version])

    dist_dir_name = 'dist'
    dist_dir = dist_dir_name

    system('npm run dist')
    puts "Distribution is prepared in #{dist_dir}"

    if DEPLOY_CONFIG[:uu5ComponentRegistry]
      system('npm pack')
      puts 'Npm package is created'

      pack_tgz = "#{@package.name}-#{@package.version}.tgz"
      new_pack_tgz = "#{@package.name}.tgz"
    end

    pack_name = "#{@package.vendor}-#{@package.lib_name.gsub("_", "-")}"
    pack_dir = File.join(target, pack_name)
    pack_dist_dir = File.join(pack_dir, dist_dir_name)
    pack_version_dir = File.join(pack_dir, @package.version)
    @pack_zip = File.join(target, "#{pack_name}.zip")

    Dir.mkdir(target) unless Dir.exists?(target)

    FileUtils.remove_dir(@pack_zip) if File.exists?(@pack_zip)
    FileUtils.remove_dir(pack_dir) if Dir.exists?(pack_dir)
    Dir.mkdir(pack_dir)

    FileUtils.cp_r(dist_dir, pack_dir)
    File.rename(pack_dist_dir, pack_version_dir)

    if pack_tgz
      FileUtils.cp(pack_tgz, pack_version_dir)
      File.rename(File.join(pack_version_dir, pack_tgz), File.join(pack_version_dir, new_pack_tgz))
    end

    zip = ZipFileGenerator.new(pack_dir, @pack_zip)
    zip.write(true)
    FileUtils.remove_dir(pack_dir)
    puts "Generated target file #{@pack_zip}"
  end

  # run: rake uuapps:deploy[1.0.0,true,login]
  desc 'Pack application and deploy.'
  task :deploy, [:version, :deploy, :login] => [:package] do |_, args|
    require 'json'

    login = args[:login] || 'login'
    UU::OS::Security::Session.login(login)

    appboxes_uri = UU::OS::UESURIBuilder.parse_uesuri(DEPLOY_CONFIG[:appBoxFolderUri]).to_uesuri
    appbox_code = "%s/%s" % [appboxes_uri.artifact_code, @package.version]

    begin
      appbox_uri = UU::OS::Artifact.create(appboxes_uri,
                                           name: "%s %s AppBox" % [@package.name, @package.version],
                                           code: appbox_code,
                                           meta_artifact_uri: UU::OS::UESURIBuilder.parse_uesuri(appboxes_uri).set_artifact_code("UU.OS/RUNTIME/APP_BOX").to_uesuri)
    rescue UU::OS::REST::ServerException => e
      if e.code == "UU.OS/E10102.M03"
        appbox_uri = UU::OS::UESURIBuilder.parse_uesuri(appboxes_uri).set_artifact_code(appbox_code).to_uesuri
      else
        raise e
      end
    end

    puts "Uploading attachment..."

    full_code = "%s.%s" % [@package.vendor.upcase, @package.lib_name.upcase]

    attch_code = "%s/CDN-PACK" % full_code
    attch_uri = nil
    File.open(@pack_zip, 'rb') do |f|
      if appbox_uri.artifact_id
        attch_uri = UU::OS::Attachment.create(appbox_uri,
                                              data: UU::OS::REST::BinaryValue.new(f),
                                              code: attch_code)
      else
        attch_uri = UU::OS::UESURIBuilder.parse_uesuri(appbox_uri).set_object_code(attch_code).to_uesuri
        UU::OS::Attachment.check_in(attch_uri, data: UU::OS::REST::BinaryValue.new(f))
      end
    end

    UU::OS::Artifact.set_state(appbox_uri, type: UU::OS::Artifact::ArtifactStateType::ACTIVE)

    puts "Appbox created #{appbox_uri}"

    # UU::OS::Activity.create(appbox_uri,
    #                         name: 'Nasaď na betu',
    #                         activityType: UU::OS::Activity::ActivityType::TASK,
    #                         description: "Ahoj,\nnasaď na beta kanál #{@package.name} na cdn do složky #{@package.version} a do 0.0.0.\nDíky, Ondra",
    #                         executiveRoleUris: ['ues:UU-BT:SI~DLV.DPL'])

    puts "Uploading Readme..."

    readme_attch_code = "%s/README" % full_code
    readme_uri = nil
    File.open("Readme.md", 'rb') do |f|
      if appbox_uri.artifact_id
        readme_uri = UU::OS::Attachment.create(appbox_uri,
                                               data: UU::OS::REST::BinaryValue.new(f),
                                               code: readme_attch_code)
      else
        readme_uri = UU::OS::UESURIBuilder.parse_uesuri(appbox_uri).set_object_code(readme_attch_code).to_uesuri
        UU::OS::Attachment.check_in(readme_uri, data: UU::OS::REST::BinaryValue.new(f))
      end
    end

    puts "Uploading uuapp-deploy..."

    deploy_attch_code = "%s/UUAPP-DEPLOY" % full_code
    f = JSON.pretty_generate({
                               "schemaUri": "ues:SYSTEM:UU.OS/UUAPP-DEPLOY-SCHEMA-V2.2",
                               "data": {
                                 "code": full_code,
                                 "name": @package.name,
                                 "description": "#{@package.name} UI library",
                                 "version": @package.version,
                                 "multitenant": true,
                                 "packs": [

                                 ],
                                 "nodeSets": [

                                 ]
                               }
                             })

    binary_value = UU::OS::REST::BinaryValue.new({data: f, name: 'uuapp-deploy.json'})

    if appbox_uri.artifact_id
      uuapp_deploy_uri = UU::OS::Attachment.create(appbox_uri,
                                                   data: binary_value,
                                                   code: deploy_attch_code)
    else
      uuapp_deploy_uri = UU::OS::UESURIBuilder.parse_uesuri(appbox_uri).set_object_code(deploy_attch_code).to_uesuri
      UU::OS::Attachment.check_in(uuapp_deploy_uri, data: binary_value)
    end

    uu5_cr_deploy_uri = nil
    if DEPLOY_CONFIG[:uu5ComponentRegistry]
      puts "Uploading uu5-component-registry..."

      uu5_cr_attch_code = "%s/UU5COMPONENTREGISTRY-DEPLOY" % full_code

      libs = {
        @package.name => {
          version: @package.version,
          beta: @package.version[/beta/] ? "beta/" : ""
        }
      }

      @package.dependencies.each do |libName, url|
        if url[/^http/]
          version = url[/(\d+\.){2}\d+(-[a-z0-9.]+)?/]
          libs[libName.to_s] = {
            version: version,
            beta: version[/beta/] ? "beta/" : ""
          }
        end
      end

      json = ERB.new(DEPLOY_CONFIG[:uu5ComponentRegistry].to_json).result(binding)
      uu5_cr = JSON.parse(json)

      uu5_cr.map do |lib|
        libName = lib["name"].split("-")[0]
        libNameVendor = libName.gsub("_", "-")
        if !libNameVendor.split("-")[1] && libNameVendor[/^uu/]
          libNameVendor = "uu-#{libNameVendor}"
        end

        lib["version"] = @package.version
        lib["source"] ||= "https://cdn.plus4u.net/#{@package.version[/beta/] ? "beta/" : ""}#{libNameVendor}/#{@package.version}/#{lib["name"].gsub(/^uu_uu/, "uu")}.min.js"
        lib["doc"] ||= DEPLOY_CONFIG[:docUrl]

        lib["dependencies"].each do |libFullName, url|
          unless url
            libName = libFullName.split("-")[0]
            libParams = libs[libName]
            libNameVendor = libName.gsub("_", "-")
            if !libNameVendor.split("-")[1] && libNameVendor[/^uu/]
              libNameVendor = "uu-#{libNameVendor}"
            end

            if libParams
              url = "https://cdn.plus4u.net/#{libParams[:beta]}#{libNameVendor}/#{libParams[:version]}/#{libFullName.gsub(/^uu_uu/, "uu")}.min.js"
              lib["dependencies"][libFullName] = url
            else
              puts "Error: Library #{libFullName} is not in package.json"
            end
          end
        end
        lib
      end

      binary_value = UU::OS::REST::BinaryValue.new({
                                                     name: 'uu5-component-registry-deploy.json',
                                                     data: JSON.pretty_generate(uu5_cr)
                                                   })

      if appbox_uri.artifact_id
        uu5_cr_deploy_uri = UU::OS::Attachment.create(appbox_uri,
                                                      data: binary_value,
                                                      code: uu5_cr_attch_code)
      else
        uu5_cr_deploy_uri = UU::OS::UESURIBuilder.parse_uesuri(appbox_uri).set_object_code(uu5_cr_attch_code).to_uesuri
        UU::OS::Attachment.check_in(uu5_cr_deploy_uri, data: binary_value)
      end
    end

    if appbox_uri.artifact_id
      puts "Uploading sheet..."

      require 'erb'

      erb = %`<?xml version='1.0' encoding='UTF-8'?>
<core:document xmlns:core="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor.xsd" version="3.1">
  <core:chapter changed="false">
    <core:title>
      <core:text>AppBox Contents</core:text>
      <comments xmlns="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor_UES.xsd" changed="false"></comments>
      <core:text></core:text>
    </core:title>
    <core:body>
      <core:list type="default_u" changed="false">
        <core:item>
          <core:paragraph>
            <attachment xmlns="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor_UES.xsd" refreshType="automatic" tooltipType="system" stateIcon="true" uesaddress="<%= readme_uri %>" changed="false">
              <core:text>README.md</core:text>
            </attachment>
            <core:text></core:text>
          </core:paragraph>
        </core:item>
        <core:item>
          <core:paragraph>
            <attachment xmlns="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor_UES.xsd" refreshType="automatic" tooltipType="system" stateIcon="true" uesaddress="<%= uuapp_deploy_uri %>" changed="false">
              <core:text>uuapp-deploy.json</core:text>
            </attachment>
            <core:text></core:text>
          </core:paragraph>
        </core:item>
        <% if uu5_cr_deploy_uri %>
        <core:item>
          <core:paragraph>
            <attachment xmlns="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor_UES.xsd" refreshType="automatic" tooltipType="system" stateIcon="true" uesaddress="<%= uu5_cr_deploy_uri %>" changed="false">
              <core:text>uu5-component-registry-deploy.json</core:text>
            </attachment>
            <core:text></core:text>
          </core:paragraph>
        </core:item>
        <% end %>
        <core:item>
          <core:paragraph>
            <attachment xmlns="http://www.unicorn.cz/afu_v1/af_v1/util_v1/unitor_v1/Unitor_UES.xsd" refreshType="automatic" tooltipType="system" stateIcon="true" uesaddress="<%= attch_uri %>" changed="false">
              <core:text><%= @package.name %>.zip</core:text>
            </attachment>
            <core:text> - CDN pack</core:text>
          </core:paragraph>
        </core:item>
      </core:list>
    </core:body>
  </core:chapter>
</core:document>`

      sheet_uri = UU::OS::Sheet.get_sheet_list(appbox_uri, :query => "main = true").first.uri
      UU::OS::Sheet.check_in(sheet_uri, content: UU::OS::REST::BinaryValue.new(ERB.new(erb).result(binding)))
    end

    if args[:deploy] && @package.version[/beta/]
      feature = UU::C3::AppDeployment.deploy(DEPLOY_CONFIG[:poolUri], appBoxUri: appbox_uri)
      puts "Deploy was started with uri #{feature.get}."
    end

    appbox_uri
  end

  desc 'Gets log record for last deployment. accept argument hash with get_log_list parameters"'
  task :log do |t, args|
    require 'uu_logstore'

    @cloud_config = CloudConfig.new
    @descriptor = DeploymentDescriptor.new(@cloud_config.territory_code)

    UU::OS::Security::Session.login(@cloud_config.access_path)
    deployment_uri = nil
    deployment_list = UU::C3::AppDeployment.get_app_deployment_list(@cloud_config.pool_uri)
    # because UU::Logstore::Log.get_log_list need normalized uri and there is no other way to find it
    deployment_list.each do |deployment|
      if deployment[:uri].include?(@descriptor.data[:code])
        deployment_uri = deployment[:uri]
        puts "Found deployment uri #{deployment_uri}"
        break
      end
    end

    if deployment_uri == nil
      puts "No deployment for application #{@descriptor.data[:code]} found."
    else
      records = UU::Logstore::Log.get_log_list(deployment_uri)
      File.open('log.json', 'w') do |f|
        f.write(JSON.pretty_generate(records))
      end
    end
  end

end

task :default => 'uuapps:deploy'
