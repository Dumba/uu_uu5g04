// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Forms.InputTextMixin interface test editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider uu5-forms-slider-slider-read-only"
      disabled={true}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      readonly={true}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getChangeFeedback() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getFeedBack() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getFeedBack() 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getLabel(idinput) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getMessage() should return null, second: shoudl return new mesage 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getValue() should return value 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={20}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="20"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test getValue() value is empty. Should return empty string. 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isError() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-red"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="error"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isError() 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isInitial() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isInitial() 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-red"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="error"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isInput() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isLoading() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      min={-300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={-300}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isReadOnly() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isReadOnly() 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider uu5-forms-slider-slider-read-only"
      disabled={true}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      readonly={true}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isWarning() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-orange"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="warning"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test isWarning() 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider uu5-forms-slider-slider-read-only"
      disabled={true}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      readonly={true}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider uu5-forms-slider-slider-read-only color-schema-green"
      disabled={true}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={100}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      readonly={true}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setChangeFeedback() 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message from setChangeFeedback"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-red"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={50}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="error"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider uu5-forms-slider-slider-read-only"
      disabled={true}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      readonly={true}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-red"
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={-10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="error"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={10}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={20}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="20"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={150}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="150"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-red"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={20}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="error"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="20"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      disabled={true}
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      disabled={true}
      feedback="loading"
      id="idTextArea-input"
      loading={true}
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={5}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="5"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-green"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="success"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setValue(value,setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={10}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="10"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setValue(value,setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={150}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="150"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-initial"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="initial"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputTextMixin interface test setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-slider uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon"
  id="idTextArea"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Level of slide"
    for="idTextArea-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
    slider={true}
  >
    <Slider
      className="uu5-forms-slider-slider color-schema-orange"
      max={300}
      onChange={[Function]}
      ref_={[Function]}
      style={
        Object {
          "width": null,
        }
      }
      value={0}
    />
    <text-input
      className="uu5-forms-slider-number"
      feedback="warning"
      id="idTextArea-input"
      mainAttrs={Object {}}
      max={300}
      min={0}
      name="idTextArea-input"
      onBlur={[Function]}
      onChange={[Function]}
      onChangeFeedback={[Function]}
      onFocus={[Function]}
      readonly={false}
      value="0"
    />
  </InputWrapper>
</div>
`;
