// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Forms.InputMixin interface test editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <items-input
      feedback="initial"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={true}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getChangeFeedback() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getFeedBack() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getFeedBack() 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getLabel(idinput) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getMessage() should return null, second: shoudl return new mesage 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test getValue() value is empty. Should return empty string. 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isError() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="error"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isError() 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isInitial() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isInitial() 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
  >
    <items-input
      feedback="error"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Info",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Info",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isInput() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-multiple"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      multiple={true}
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={true}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isLoading() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isReadOnly() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isReadOnly() 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <items-input
      feedback="initial"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={true}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isSuccess() fisr return false, second return true 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isWarning() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="warning"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test isWarning() 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <items-input
      feedback="initial"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={true}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
  >
    <items-input
      feedback="success"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={true}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setChangeFeedback() 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="Success message from setChangeFeedback"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value="Task"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <items-input
      feedback="initial"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={true}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="error"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="error"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
  >
    <items-input
      disabled={true}
      feedback="loading"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      loading={true}
      mainAttrs={Object {}}
      name="idSelect-input"
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
  >
    <items-input
      feedback="success"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface test setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
    required={true}
  >
    <items-input
      feedback="warning"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={false}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Select interface test addValue(value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-multiple"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon="mdi-menu-down"
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      multiple={true}
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={Array []}
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={true}
      onChange={[Function]}
      ref_={[Function]}
      value={Array []}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Select interface test addValue(value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-select uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap uu5-forms-select-state-holder uu5-forms-select-multiple uu5-forms-select-has-value"
  id="idSelect"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Issue category"
    for="idSelect-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <items-input
      feedback="initial"
      icon={null}
      id="idSelect-input"
      inputWidth={null}
      mainAttrs={
        Object {
          "onFocus": [Function],
          "tabIndex": "0",
        }
      }
      multiple={true}
      name="idSelect-input"
      onItemClick={[Function]}
      readonly={false}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
    <item-list
      allowTags={Array []}
      hidden={true}
      multiple={true}
      onChange={[Function]}
      ref_={[Function]}
      value={
        Array [
          "Task",
        ]
      }
    />
  </InputWrapper>
</div>
`;
