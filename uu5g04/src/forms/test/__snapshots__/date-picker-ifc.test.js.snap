// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Form.DatePicker intreface testing parseDate(date) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="uuID01"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Date of birth"
    for="uuID01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="uuID01-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="uuID01-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getChangeFeedback() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getFeedBack() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getFeedBack() 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getLabel(idinput) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getMessage() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isError() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isError() 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInitial() shoud return true 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInitial() should return false 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
  >
    <text-input
      feedback="error"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInput() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Enter time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isLoading() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isReadOnly() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isReadOnly() 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={true}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isWarning() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="warning"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isWarning() 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setChangeFeedback() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="Success message from setChangeFeedback"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12.12.2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
  >
    <text-input
      feedback="error"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
  >
    <text-input
      disabled={true}
      feedback="loading"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      loading={true}
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
  >
    <text-input
      feedback="success"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setValue(value,setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Enter time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setValue(value,setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Enter time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
  >
    <text-input
      feedback="warning"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing focus() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing focus() 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing getBlurFeedback() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isOpen() should return false 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isTextInput() should return true 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isValid() 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="12/12/2012"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isValid() should return false 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message={
      <Lsi
        allowTags={Array []}
        className={null}
        content={null}
        controlled={true}
        disabled={false}
        dynamic={false}
        hidden={false}
        id={null}
        ignoreInnerHTML={false}
        language={null}
        lsi={
          Object {
            "cs": "Toto pole je povinné.",
            "en": "This field is required.",
            "sk": "Toto pole je povinné.",
            "uk": "Це поле є обов'язковим",
          }
        }
        mainAttrs={null}
        name={null}
        nestingLevel={null}
        noIndex={false}
        params={null}
        parent={null}
        pureRender={false}
        ref_={null}
        selected={false}
        style={null}
        tooltip={null}
      />
    }
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing setAutocompleteItems(items,opt,setStateCallBack) 1`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing setAutocompleteItems(items,opt,setStateCallBack) 2`] = `
<div
  className="uu5-forms-datepicker uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  onClick={[Function]}
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Enter valid time"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      icon="mdi-calendar"
      iconClickable={false}
      id="idText-input"
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="Valid time"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
    <forwardRef(Popover)
      disableBackdrop={true}
      forceRender={true}
      ref_={[Function]}
      shown={false}
    />
  </InputWrapper>
</div>
`;
