// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Forms.InputMinxin interface editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getChangeFeedback() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getFeedBack() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getFeedBack() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getLabel(idinput) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getMessage() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getValue() should return value 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="My Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface getValue() value is empty. Should return empty string. 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isError() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isError() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Default value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isInitial() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isInitial() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isInput() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isLoading() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isReadOnly() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isReadOnly() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Success Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isWarning() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="warning"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface isWarning() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Default value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="New Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setChangeFeedback() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message from setChangeFeedback"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="NaN"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Error value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="This is valid value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
  >
    <autocomplete-text-input
      disabled={true}
      feedback="loading"
      id="idText-input"
      loading={true}
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Value is loaded"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="success"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Success Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setValue(value,setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setValue(value,setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="My New Set Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMinxin interface setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
  >
    <autocomplete-text-input
      feedback="warning"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Warning Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  focus() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  focus() 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  getBlurFeedback() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  isTextInput() should return true 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  isValid() 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  isValid() should return false 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message={
      <Lsi
        allowTags={Array []}
        className={null}
        content={null}
        controlled={true}
        disabled={false}
        dynamic={false}
        hidden={false}
        id={null}
        ignoreInnerHTML={false}
        language={null}
        lsi={
          Object {
            "cs": "Toto pole je povinné.",
            "en": "This field is required.",
            "sk": "Toto pole je povinné.",
            "uk": "Це поле є обов'язковим",
          }
        }
        mainAttrs={null}
        name={null}
        nestingLevel={null}
        noIndex={false}
        params={null}
        parent={null}
        pureRender={false}
        ref_={null}
        selected={false}
        style={null}
        tooltip={null}
      />
    }
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      feedback="error"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  setAutocompleteItems(items,opt,setStateCallBack) 1`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  setAutocompleteItems(items,opt,setStateCallBack) 2`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      foundItemListItems={null}
      id="idText-input"
      itemListProps={
        Object {
          "hidden": true,
          "onChange": [Function],
          "parent": Object {
            "__isMounted": true,
            "_isMounted": true,
            "context": Object {},
            "id": "idText",
            "mixinRegister": Array [
              "UU5.Common.BaseMixin",
              "UU5.Common.PureRenderMixin",
              "UU5.Common.ElementaryMixin",
              "UU5.Common.ColorSchemaMixin",
            ],
            "props": Object {
              "autocompleteItems": null,
              "bgStyle": null,
              "borderRadius": null,
              "className": null,
              "colorSchema": null,
              "controlled": true,
              "disabled": false,
              "elevation": null,
              "feedback": "initial",
              "focusMessage": null,
              "hidden": false,
              "id": "idText",
              "inputAttrs": null,
              "inputColWidth": Object {
                "l": 7,
                "m": 7,
                "s": 7,
                "xl": 7,
                "xs": 12,
              },
              "inputWidth": null,
              "label": "Full name",
              "labelAlignment": undefined,
              "labelColWidth": Object {
                "l": 5,
                "m": 5,
                "s": 5,
                "xl": 5,
                "xs": 12,
              },
              "labelWidth": null,
              "mainAttrs": null,
              "message": null,
              "name": null,
              "noIndex": false,
              "onBlur": null,
              "onChange": null,
              "onEnter": null,
              "onFocus": null,
              "onValidate": null,
              "parent": null,
              "password": false,
              "pattern": null,
              "patternMessage": null,
              "placeholder": "John Smith",
              "pureRender": false,
              "readOnly": false,
              "ref_": null,
              "required": false,
              "requiredMessage": null,
              "selected": false,
              "size": "s",
              "spacing": null,
              "style": null,
              "tooltip": null,
              "tooltipIcon": "mdi-information-outline",
              "validateOnChange": false,
              "value": "",
            },
            "refs": Object {},
            "state": Object {
              "autocompleteItems": Array [
                Object {
                  "value": "Kovar",
                },
                Object {
                  "value": "Novak",
                },
                Object {
                  "value": "Novotny",
                },
                Object {
                  "value": "Svacina",
                },
              ],
              "disabled": false,
              "feedback": "initial",
              "foundAutocompleteItems": null,
              "hidden": false,
              "message": null,
              "open": false,
              "readOnly": false,
              "selected": false,
              "selectedIndex": null,
              "value": "",
            },
            "tagName": "UU5.Forms.Text",
          },
          "ref": [Function],
          "value": "",
        }
      }
      itemsListItems={
        Array [
          Object {
            "value": "Kovar",
          },
          Object {
            "value": "Novak",
          },
          Object {
            "value": "Novotny",
          },
          Object {
            "value": "Svacina",
          },
        ]
      }
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onClose={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onOpen={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.Text interface test TextInputMixin  setAutocompleteItems(items,opt,setStateCallBack) 3`] = `
<div
  className="uu5-forms-text uu5-forms-input uu5-forms-input-s uu5-forms-input-initial"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      feedback="initial"
      foundItemListItems={
        Array [
          <select-option
            className={null}
            content="Kovar"
            controlled={true}
            disabled={false}
            dynamic={false}
            hidden={false}
            id={null}
            ignoreInnerHTML={false}
            mainAttrs={
              Object {
                "id": "idText-item-0",
                "tabIndex": 0,
              }
            }
            name={null}
            noIndex={false}
            onClick={null}
            parent={null}
            pureRender={false}
            ref_={null}
            selected={false}
            selectedContent={null}
            style={null}
            tooltip={null}
            value="Kovar"
          />,
          <select-option
            className={null}
            content="Novak"
            controlled={true}
            disabled={false}
            dynamic={false}
            hidden={false}
            id={null}
            ignoreInnerHTML={false}
            mainAttrs={
              Object {
                "id": "idText-item-1",
                "tabIndex": 0,
              }
            }
            name={null}
            noIndex={false}
            onClick={null}
            parent={null}
            pureRender={false}
            ref_={null}
            selected={false}
            selectedContent={null}
            style={null}
            tooltip={null}
            value="Novak"
          />,
          <select-option
            className={null}
            content="Novotny"
            controlled={true}
            disabled={false}
            dynamic={false}
            hidden={false}
            id={null}
            ignoreInnerHTML={false}
            mainAttrs={
              Object {
                "id": "idText-item-2",
                "tabIndex": 0,
              }
            }
            name={null}
            noIndex={false}
            onClick={null}
            parent={null}
            pureRender={false}
            ref_={null}
            selected={false}
            selectedContent={null}
            style={null}
            tooltip={null}
            value="Novotny"
          />,
          <select-option
            className={null}
            content="Svacina"
            controlled={true}
            disabled={false}
            dynamic={false}
            hidden={false}
            id={null}
            ignoreInnerHTML={false}
            mainAttrs={
              Object {
                "id": "idText-item-3",
                "tabIndex": 0,
              }
            }
            name={null}
            noIndex={false}
            onClick={null}
            parent={null}
            pureRender={false}
            ref_={null}
            selected={false}
            selectedContent={null}
            style={null}
            tooltip={null}
            value="Svacina"
          />,
        ]
      }
      id="idText-input"
      itemListProps={
        Object {
          "hidden": false,
          "onChange": [Function],
          "parent": Object {
            "__isMounted": true,
            "_isMounted": true,
            "context": Object {},
            "id": "idText",
            "mixinRegister": Array [
              "UU5.Common.BaseMixin",
              "UU5.Common.PureRenderMixin",
              "UU5.Common.ElementaryMixin",
              "UU5.Common.ColorSchemaMixin",
            ],
            "props": Object {
              "autocompleteItems": null,
              "bgStyle": null,
              "borderRadius": null,
              "className": null,
              "colorSchema": null,
              "controlled": true,
              "disabled": false,
              "elevation": null,
              "feedback": "initial",
              "focusMessage": null,
              "hidden": false,
              "id": "idText",
              "inputAttrs": null,
              "inputColWidth": Object {
                "l": 7,
                "m": 7,
                "s": 7,
                "xl": 7,
                "xs": 12,
              },
              "inputWidth": null,
              "label": "Full name",
              "labelAlignment": undefined,
              "labelColWidth": Object {
                "l": 5,
                "m": 5,
                "s": 5,
                "xl": 5,
                "xs": 12,
              },
              "labelWidth": null,
              "mainAttrs": null,
              "message": null,
              "name": null,
              "noIndex": false,
              "onBlur": null,
              "onChange": null,
              "onEnter": null,
              "onFocus": null,
              "onValidate": null,
              "parent": null,
              "password": false,
              "pattern": null,
              "patternMessage": null,
              "placeholder": "John Smith",
              "pureRender": false,
              "readOnly": false,
              "ref_": null,
              "required": false,
              "requiredMessage": null,
              "selected": false,
              "size": "s",
              "spacing": null,
              "style": null,
              "tooltip": null,
              "tooltipIcon": "mdi-information-outline",
              "validateOnChange": false,
              "value": "",
            },
            "refs": Object {},
            "state": Object {
              "autocompleteItems": Array [
                Object {
                  "value": "Kovar",
                },
                Object {
                  "value": "Novak",
                },
                Object {
                  "value": "Novotny",
                },
                Object {
                  "value": "Svacina",
                },
              ],
              "disabled": false,
              "feedback": "initial",
              "foundAutocompleteItems": Array [
                Object {
                  "value": "Kovar",
                },
                Object {
                  "value": "Novak",
                },
                Object {
                  "value": "Novotny",
                },
                Object {
                  "value": "Svacina",
                },
              ],
              "hidden": false,
              "message": null,
              "open": true,
              "readOnly": false,
              "selected": false,
              "selectedIndex": null,
              "value": "",
            },
            "tagName": "UU5.Forms.Text",
          },
          "ref": [Function],
          "value": "",
        }
      }
      itemsListItems={
        Array [
          Object {
            "value": "Kovar",
          },
          Object {
            "value": "Novak",
          },
          Object {
            "value": "Novotny",
          },
          Object {
            "value": "Svacina",
          },
        ]
      }
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onClose={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onOpen={[Function]}
      open={true}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="s"
    />
  </InputWrapper>
</div>
`;
