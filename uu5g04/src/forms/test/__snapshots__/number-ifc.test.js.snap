// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Forms.InputMixin interface testing editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={true}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getChangeFeedback() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getFeedBack() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getFeedBack() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value=""
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getLabel(idinput) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getMessage() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getValue() should return value 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing getValue() value is empty. Should return empty string. 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isError() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isError() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInitial() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInitial() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": true,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="1000"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "1000",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isInput() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isLoading() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isReadOnly() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isReadOnly() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={true}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isWarning() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="warning"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing isWarning() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={true}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={true}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setChangeFeedback() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message from setChangeFeedback"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="NaN"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "NaN",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={true}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="666"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          666,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": true,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": true,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
  >
    <text-input
      disabled={true}
      feedback="loading"
      id="idText-input"
      loading={true}
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-success uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
  >
    <text-input
      feedback="success"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="69"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          69,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setValue(value,setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setValue(value,setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "m",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface testing setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-warning uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
  >
    <text-input
      feedback="warning"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          100,
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing focus() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing focus() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing getBlurFeedback() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing getFocusFeedback() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": true,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="0"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "0",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing getFocusFeedback() 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": true,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="0"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "0",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isTextInput() should return true 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isValid() 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      value="100"
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={
        Array [
          "100",
        ]
      }
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing isValid() should return false 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-error uu5-forms-input-icon uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This field is required."
    readonly={false}
    required={true}
  >
    <text-input
      feedback="error"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing setAutocompleteItems(items,opt,setStateCallBack) 1`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface testing setAutocompleteItems(items,opt,setStateCallBack) 2`] = `
<div
  className="uu5-forms-number uu5-forms-input uu5-forms-input-s uu5-forms-input-initial uu5-forms-input-prevent-wrap"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Number of items"
    for="idText-input"
  />
  <InputWrapper
    buttons={
      Array [
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-minus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
        Object {
          "bgStyle": null,
          "borderRadius": null,
          "colorSchema": null,
          "disabled": false,
          "elevation": null,
          "icon": "mdi-plus",
          "mainAttrs": Object {
            "onMouseDown": [Function],
            "onMouseOut": [Function],
            "onMouseUp": [Function],
          },
          "onClick": [Function],
          "size": "s",
        },
      ]
    }
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <text-input
      feedback="initial"
      id="idText-input"
      mainAttrs={
        Object {
          "onKeyDown": [Function],
          "onMouseUp": [Function],
        }
      }
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
    />
    <item-list
      hidden={true}
      onChange={[Function]}
      value={null}
    />
    <Backdrop
      hidden={true}
      id="idText-backdrop"
      onClick={[Function]}
    />
  </InputWrapper>
</div>
`;
