// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`UU5.Forms.InputMixin interface editable(setStatecallback) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface editable(setStatecallback) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getChangeFeedback() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getFeedBack() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getFeedBack() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getInputWrapper(inpuid) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getLabel(idinput) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getMessage() should return null, second: shoudl return new mesage 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getValue() should return value 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
      value="My Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface getValue() value is empty. Should return empty string. 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isError() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isError() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Default value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isInitial() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isInitial() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error messagess"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isInput() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isLoading() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isReadOnly() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isReadOnly() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isSuccess() fisr return false, second return true 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Success Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isWarning() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="Warning message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="warning"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface isWarning() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="success message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Default value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface readOnly(setStatecallback) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface readOnly(setStatecallback) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface reset(setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="New Message"
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="m"
      value="New Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface reset(setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setChangeFeedback() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="Error message from setChangeFeedback"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Error value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setEditableValue(false, setStateCallback) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setEditableValue(false, setStateCallback) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-read-only uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={true}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={true}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setEditableValue(true, setStateCallback) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setEditableValue(true, setStateCallback) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="John Doe"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setError(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setError(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This is error mesage"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Error value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setFeedBack(feedback, message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setFeedBack(feedback, message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is valid message."
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
      value="This is valid value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setInitial(msg, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This input is required"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setInitial(msg, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="Initial Message"
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setLoading(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setLoading(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-loading uu5-forms-input-icon uu5-common-disabled uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="loading"
    message="Loading messsagess"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      disabled={true}
      feedback="loading"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      loading={true}
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Value is loaded"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setMessage(msg, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setMessage(msg, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    message="New Message"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setSuccess(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setSuccess(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-success uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="success"
    message="This is success message"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="success"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Success Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setValue(value,setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setValue(value,setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id01"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Desctiption"
    for="id01-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id01-input"
      mainAttrs={Object {}}
      name="id01-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      readonly={false}
      ref_={[Function]}
      size="m"
      value="My New Set Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setWarning(message, value, setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.InputMixin interface setWarning(message, value, setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-warning uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="warning"
    message="This is warning message"
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="warning"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Warning Value"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface focus() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface focus() 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface getBlurFeedback() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface isOpen() should return false 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      foundItemListItems={null}
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      itemListProps={
        Object {
          "hidden": true,
          "onChange": [Function],
          "parent": Object {
            "__isMounted": true,
            "_isMounted": true,
            "context": Object {},
            "id": "id1",
            "mixinRegister": Array [
              "UU5.Common.BaseMixin",
              "UU5.Common.PureRenderMixin",
              "UU5.Common.ElementaryMixin",
              "UU5.Common.ColorSchemaMixin",
            ],
            "props": Object {
              "actionOnEnter": false,
              "autocompleteItems": Array [
                Object {
                  "value": "Aneta",
                },
                Object {
                  "value": "Albert",
                },
                Object {
                  "value": "Honza",
                },
                Object {
                  "value": "Alzbeta",
                },
              ],
              "bgStyle": null,
              "borderRadius": null,
              "className": null,
              "colorSchema": null,
              "contentEditable": undefined,
              "controlled": true,
              "disabled": false,
              "editable": undefined,
              "elevation": null,
              "feedback": "initial",
              "focusMessage": null,
              "hidden": false,
              "icon": "mdi-check",
              "iconPosition": "right",
              "id": "id1",
              "inputAttrs": null,
              "inputColWidth": Object {
                "l": 7,
                "m": 7,
                "s": 7,
                "xl": 7,
                "xs": 12,
              },
              "inputWidth": null,
              "label": "Full name",
              "labelAlignment": undefined,
              "labelColWidth": Object {
                "l": 5,
                "m": 5,
                "s": 5,
                "xl": 5,
                "xs": 12,
              },
              "labelWidth": null,
              "mainAttrs": null,
              "message": null,
              "name": null,
              "noIndex": false,
              "onBlur": null,
              "onChange": null,
              "onClick": null,
              "onEnter": null,
              "onFocus": null,
              "onValidate": null,
              "parent": null,
              "password": false,
              "pattern": null,
              "patternMessage": null,
              "placeholder": "John Smith",
              "pureRender": false,
              "readOnly": false,
              "ref_": null,
              "required": true,
              "requiredMessage": null,
              "selected": false,
              "size": "m",
              "spacing": null,
              "style": null,
              "tooltip": null,
              "tooltipIcon": "mdi-information-outline",
              "validateOnChange": false,
              "value": "",
            },
            "refs": Object {},
            "state": Object {
              "autocompleteItems": Array [
                Object {
                  "value": "Aneta",
                },
                Object {
                  "value": "Albert",
                },
                Object {
                  "value": "Honza",
                },
                Object {
                  "value": "Alzbeta",
                },
              ],
              "disabled": false,
              "feedback": "initial",
              "foundAutocompleteItems": null,
              "hidden": false,
              "message": null,
              "open": false,
              "readOnly": false,
              "selected": false,
              "selectedIndex": null,
              "value": "",
            },
            "tagName": "UU5.Forms.TextIcon",
          },
          "ref": [Function],
          "value": "",
        }
      }
      itemsListItems={
        Array [
          Object {
            "value": "Aneta",
          },
          Object {
            "value": "Albert",
          },
          Object {
            "value": "Honza",
          },
          Object {
            "value": "Alzbeta",
          },
        ]
      }
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onClose={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onOpen={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface isTextInput() should return true 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface isValid() 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-input-icon uu5-forms-text-icon-right"
  id="idText"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="idText-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="idText-input"
      mainAttrs={Object {}}
      name="idText-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
      value="Anna Simpson"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface isValid() should return false 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-error uu5-forms-input-icon uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
    required={true}
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    feedback="error"
    message="This field is required."
    readonly={false}
    required={true}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="error"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface setAutocompleteItems(items,opt,setStateCallBack) 1`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      mainAttrs={Object {}}
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;

exports[`UU5.Forms.TextInputMixin interface setAutocompleteItems(items,opt,setStateCallBack) 2`] = `
<div
  className="uu5-forms-text-icon uu5-forms-input uu5-forms-input-m uu5-forms-input-initial uu5-forms-text-icon-right"
  id="id1"
  style={Object {}}
>
  <label
    colWidth="uu5-col-xs12 uu5-col-s5 uu5-col-m5 uu5-col-l5 uu5-col-xl5"
    content="Full name"
    for="id1-input"
  />
  <InputWrapper
    colWidth="uu5-col-xs12 uu5-col-s7 uu5-col-m7 uu5-col-l7 uu5-col-xl7"
    disabled={false}
    readonly={false}
  >
    <autocomplete-text-input
      clickable={false}
      feedback="initial"
      foundItemListItems={null}
      icon="mdi-check"
      iconOnClick={[Function]}
      id="id1-input"
      itemListProps={
        Object {
          "hidden": true,
          "onChange": [Function],
          "parent": Object {
            "__isMounted": true,
            "_isMounted": true,
            "context": Object {},
            "id": "id1",
            "mixinRegister": Array [
              "UU5.Common.BaseMixin",
              "UU5.Common.PureRenderMixin",
              "UU5.Common.ElementaryMixin",
              "UU5.Common.ColorSchemaMixin",
            ],
            "props": Object {
              "actionOnEnter": false,
              "autocompleteItems": null,
              "bgStyle": null,
              "borderRadius": null,
              "className": null,
              "colorSchema": null,
              "contentEditable": undefined,
              "controlled": true,
              "disabled": false,
              "editable": undefined,
              "elevation": null,
              "feedback": "initial",
              "focusMessage": null,
              "hidden": false,
              "icon": "mdi-check",
              "iconPosition": "right",
              "id": "id1",
              "inputAttrs": null,
              "inputColWidth": Object {
                "l": 7,
                "m": 7,
                "s": 7,
                "xl": 7,
                "xs": 12,
              },
              "inputWidth": null,
              "label": "Full name",
              "labelAlignment": undefined,
              "labelColWidth": Object {
                "l": 5,
                "m": 5,
                "s": 5,
                "xl": 5,
                "xs": 12,
              },
              "labelWidth": null,
              "mainAttrs": null,
              "message": null,
              "name": null,
              "noIndex": false,
              "onBlur": null,
              "onChange": null,
              "onClick": null,
              "onEnter": null,
              "onFocus": null,
              "onValidate": null,
              "parent": null,
              "password": false,
              "pattern": null,
              "patternMessage": null,
              "placeholder": "John Smith",
              "pureRender": false,
              "readOnly": false,
              "ref_": null,
              "required": false,
              "requiredMessage": null,
              "selected": false,
              "size": "m",
              "spacing": null,
              "style": null,
              "tooltip": null,
              "tooltipIcon": "mdi-information-outline",
              "validateOnChange": false,
              "value": "",
            },
            "refs": Object {},
            "state": Object {
              "autocompleteItems": Array [
                Object {
                  "value": "Kovar",
                },
                Object {
                  "value": "Novak",
                },
                Object {
                  "value": "Novotny",
                },
                Object {
                  "value": "Svacina",
                },
              ],
              "disabled": false,
              "feedback": "initial",
              "foundAutocompleteItems": null,
              "hidden": false,
              "message": null,
              "open": false,
              "readOnly": false,
              "selected": false,
              "selectedIndex": null,
              "value": "",
            },
            "tagName": "UU5.Forms.TextIcon",
          },
          "ref": [Function],
          "value": "",
        }
      }
      itemsListItems={
        Array [
          Object {
            "value": "Kovar",
          },
          Object {
            "value": "Novak",
          },
          Object {
            "value": "Novotny",
          },
          Object {
            "value": "Svacina",
          },
        ]
      }
      mainAttrs={
        Object {
          "autoComplete": "off",
        }
      }
      name="id1-input"
      onBlur={[Function]}
      onChange={[Function]}
      onClose={[Function]}
      onFocus={[Function]}
      onKeyDown={[Function]}
      onOpen={[Function]}
      placeholder="John Smith"
      readonly={false}
      ref_={[Function]}
      size="m"
    />
  </InputWrapper>
</div>
`;
